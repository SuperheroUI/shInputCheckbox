(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lodash"));
	else if(typeof define === 'function' && define.amd)
		define(["lodash"], factory);
	else if(typeof exports === 'object')
		exports["sh-core"] = factory(require("lodash"));
	else
		root["sh-core"] = factory(root["_"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.getDecimal = exports.getClassNames = undefined;
	
	var _getClassNames = __webpack_require__(/*! ./util/get-class-names */ 1);
	
	var _getClassNames2 = _interopRequireDefault(_getClassNames);
	
	var _getDecimal = __webpack_require__(/*! ./util/get-decimal */ 3);
	
	var _getDecimal2 = _interopRequireDefault(_getDecimal);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.getClassNames = _getClassNames2.default;
	exports.getDecimal = _getDecimal2.default;
	exports.default = {
	    getClassNames: _getClassNames2.default,
	    getDecimal: _getDecimal2.default
	};

/***/ },
/* 1 */
/*!*************************************!*\
  !*** ./src/util/get-class-names.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _lodash = __webpack_require__(/*! lodash */ 2);
	
	var _ = _interopRequireWildcard(_lodash);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/**
	 * Get a string of classNames from the object passed in. Uses the keys for class names and only adds them if the value is true. Value of keys can be boolean, function, or strings. Functions are evaluated on call. Strings are appended to end of key.
	 *
	 * @param {object} classObject Object containing keys of class names.
	 * @returns {string}
	 */
	function getClassNames(classObject) {
	    var classNames = [];
	
	    for (var key in classObject) {
	        if (classObject.hasOwnProperty(key)) {
	            var check = classObject[key];
	            var className = _.kebabCase(key);
	            if (_.isFunction(check)) {
	                if (check()) {
	                    classNames.push(className);
	                }
	            } else if (_.isString(check)) {
	                if (className === 'include' || _.includes(check, ' ')) {
	                    classNames = _.concat(classNames, check.split(' '));
	                } else {
	                    classNames.push(className + '-' + _.kebabCase(check));
	                }
	            } else if (check) {
	                classNames.push(className);
	            }
	        }
	    }
	
	    classNames = _.uniq(classNames);
	
	    return classNames.join(' ');
	}
	
	exports.default = getClassNames;

/***/ },
/* 2 */
/*!*************************************************************************************!*\
  !*** external {"root":"_","commonjs2":"lodash","commonjs":"lodash","amd":"lodash"} ***!
  \*************************************************************************************/
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/*!*********************************!*\
  !*** ./src/util/get-decimal.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _lodash = __webpack_require__(/*! lodash */ 2);
	
	var _ = _interopRequireWildcard(_lodash);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/**
	 * Get a decimal value from a string or number, remove any unnecessary characters.
	 *
	 * @param {string} value Alpha characters will be removed and a decimal will be returned. For example if you give it 'b.123' 0.123 will be returned.
	 * @returns {number}
	 */
	
	function getDecimal(value) {
	    if (!value) {
	        return 0;
	    }
	
	    var num = value;
	    if (!_.isNumber(value)) {
	        var isNeg = '-' && _.includes(value, '-');
	
	        var regExp = '[^0-9.]';
	        var numString = value.toString().replace(new RegExp(regExp, 'g'), '');
	
	        var numList = numString.split('.');
	
	        // numList will always have at least one value in array because we checked for an empty string earlier.
	        numList[0] += '.';
	        numString = numList.join('');
	        num = parseFloat(numString);
	
	        if (!num) {
	            num = 0;
	        } else if (isNeg) {
	            num *= -1;
	        }
	    }
	
	    return num;
	}
	
	exports.default = getDecimal;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=sh-core.js.map